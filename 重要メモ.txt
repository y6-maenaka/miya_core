- k_bucketのmutex管理の未実装
- トランザクションプールがあまりにもメモリを圧迫する場合,optrを使ってファイルマッピングする

- Senderに送信先を伝える際にSBSegmentのsourceAddrを使っている

- トランザクションの種類不足による,txのreturnがワンパターン
- 一旦トランザクションの種類はP2PKHだけに絞って実装する

- opensslで実装しているshaHash,ecdsa関係の関数のメモリリークが怪しい

- ecdsaManagerのsignでsha256でハッシュしていて変更不可 修正する


- トランザクションのlockingScirpt,unLockingScripitのscriyt_bytesが書き出す際にしかセットされない設計

- coinbaseInputもsignatureScriptで兼用しているため,読み書き込みが一部おかしい
-ノーマルtx_inとコインベースtx_inがほぼ似ているがそれぞれ独立して作っている

- validationScriptのOP_CODEの不正チェックが甘い -> 少なくともpopできたか否かのチェックはする


- optrをテンプレートくらすに変更する

-btreeのoptrは参照で渡した方が操作しやすそう

- optrのキャッシュ　LRUの挙動が怪しい

- btreeのexportでメモリーリークする可能性


- MMyISAMのupdate()で領域が増える場合の対策 -> flagmentの収集

※ miya_db - utxo_set 間では一応将来的な拡張性も含めて・リクエスト・レスポンスをbsonにdumpしてやりとりする

- utxo_setのレスポンス取り出し時に異なるレスポンスが紛れ込む可能性がある -> 現在は簡易的に対策 ※要修正

-btreeのMeta領域はファイル先頭である必要があるがすでにファイルに何らかのデータが書き込まれている場合はその後の処理の整合性が保てなくなりエラー落ちする,


- simpleMining 長い時間放置しているとメモリリーク起こして落ちる, 原因見つける


- コード途中でプリプロセッサディレクティブで強制的に出している

- kademliaでは満杯時に溢れたノードは交換用キャッシュに保存しておく


- listenSocketとhostNodeは分ける


- STUNサーバリストの作成と並列問い合わせの実装

- ルーティングを行わない場合は,ルーティングテーブルを作成しない 現在は問答無用で作成される

- SenderDaemonを終了させることができない


- namespace miya_chain::block / miya_chain::tx に変更する

- 特にimportRawSequentially系はエラーハンドリングするようにする


- miya_db_clientの機能をもっと充実させる　

- utxo_set でmiya_db_clientを使用する　


[ Task ]
・二重支払いチェック
・マイニング
・ブロードキャスト
・入出力金額テスト
・UTXOが存在しない場合の待機と問い合わせ
・チェーンヘッドに追いつく
・トランザクションプールからブロック作成用のトランザクションの収集
