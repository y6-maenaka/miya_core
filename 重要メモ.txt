
|---------------------------------------------------------------|
|
| 現在の実装ではP2PKHでは一旦書き出さないとsignatureScriptが生成されない
|
|---------------------------------------------------------------|




- k_bucketのmutex管理の未実装
- トランザクションプールがあまりにもメモリを圧迫する場合,optrを使ってファイルマッピングする

- Senderに送信先を伝える際にSBSegmentのsourceAddrを使っている

- トランザクションの種類不足による,txのreturnがワンパターン
- 一旦トランザクションの種類はP2PKHだけに絞って実装する

- opensslで実装しているshaHash,ecdsa関係の関数のメモリリークが怪しい

- ecdsaManagerのsignでsha256でハッシュしていて変更不可 修正する


- トランザクションのlockingScirpt,unLockingScripitのscriyt_bytesが書き出す際にしかセットされない設計

- coinbaseInputもsignatureScriptで兼用しているため,読み書き込みが一部おかしい
-ノーマルtx_inとコインベースtx_inがほぼ似ているがそれぞれ独立して作っている

- validationScriptのOP_CODEの不正チェックが甘い -> 少なくともpopできたか否かのチェックはする


- optrをテンプレートくらすに変更する

-btreeのoptrは参照で渡した方が操作しやすそう

- optrのキャッシュ　LRUの挙動が怪しい

- btreeのexportでメモリーリークする可能性


- MMyISAMのupdate()で領域が増える場合の対策 -> flagmentの収集

※ miya_db - utxo_set 間では一応将来的な拡張性も含めて・リクエスト・レスポンスをbsonにdumpしてやりとりする

- utxo_setのレスポンス取り出し時に異なるレスポンスが紛れ込む可能性がある -> 現在は簡易的に対策 ※要修正

-btreeのMeta領域はファイル先頭である必要があるがすでにファイルに何らかのデータが書き込まれている場合はその後の処理の整合性が保てなくなりエラー落ちする,


- simpleMining 長い時間放置しているとメモリリーク起こして落ちる, 原因見つける


- コード途中でプリプロセッサディレクティブで強制的に出している

- kademliaでは満杯時に溢れたノードは交換用キャッシュに保存しておく


- listenSocketとhostNodeは分ける


- STUNサーバリストの作成と並列問い合わせの実装

- ルーティングを行わない場合は,ルーティングテーブルを作成しない 現在は問答無用で作成される

- SenderDaemonを終了させることができない


- namespace miya_chain::block / miya_chain::tx に変更する

- 特にimportRawSequentially系はエラーハンドリングするようにする


- miya_db_clientの機能をもっと充実させる　

- utxo_setのdbやりとりをmiya_db_clientに換装する

- miya_chain_MSGのコマンド書き出し系が冗長

- ibdエラー発生時の回復メソッド

- いっそのことSBBody(payload)はanyの方がいいかも

- LightUTXOSet 終了時にSIGSEGエラーが発生している



( 検証項目 )
- ブロックヘッダ
- マイニング難易度 (未)
- マージン(PrevOut) ※ IBDの際はvirtualChainを構築して検証するが,順序制御をしないので,ダブルスペンディングの時系列的な整合性がチェックできない可能性がある

- コインベーストランザクション (未)
- トランザクション
- ダブルスペンディング (簡易)
- script




[ タスク ] 
- ブロックチェーン維持
- kademlia iterator







// ジェネシスブロック作成
	miya_core::MiyaCore	miyaCore;

	cipher::ECDSAManager ecdsaManager;
	std::shared_ptr<unsigned char> pemPass; size_t pemPassLength;
	pemPassLength = miyaCore.context()->pemPass( &pemPass );
	ecdsaManager.init( pemPass.get() , pemPassLength );


	EVP_PKEY *pkey;
	pkey = ecdsaManager.myPkey();
	std::shared_ptr<unsigned char> rawPubKey; size_t rawPubKeyLength;
	rawPubKeyLength = cipher::ECDSAManager::toRawPubKey( pkey , &rawPubKey );
	
	std::shared_ptr<unsigned char> rawPubKeyHash; size_t rawPubKeyHashLength;
	rawPubKeyHashLength = hash::SHAHash( rawPubKey , rawPubKeyLength , &rawPubKeyHash , "sha1" );

	/* ジェネシスブロックの作成 */
	std::shared_ptr<unsigned char> coinbaseText = std::shared_ptr<unsigned char>( new unsigned char[43] );
	memcpy( coinbaseText.get(), "(FRB) keeps policy interest rates unchanged" , 43 );
	tx::Coinbase coinbase( 0 , coinbaseText , 43 , rawPubKeyHash, miyaCore.context() );

	block::Block block;
	block.coinbase( std::make_shared<tx::Coinbase>(coinbase) );
	std::shared_ptr<unsigned char> merkleRoot; size_t merkleRootLength;
	merkleRootLength = block.calcMerkleRoot( &merkleRoot );
	block.header()->merkleRoot( merkleRoot );

	uint32_t nBits = 532390001; // 簡易的にマイニングの実行
	block.header()->nBits( nBits ); 

	uint32_t nonce = miya_chain::simpleMining( nBits , block.header() );
	block.header()->nonce( nonce );
	block.header()->print();

	std::shared_ptr<unsigned char> blockHash; size_t blockHashLength;
	blockHashLength = block.blockHash( &blockHash );


	miya_chain::MiyaChainManager miyaChainManager;
	std::shared_ptr<StreamBufferContainer> toEKP2PBrokerDummySBC = std::make_shared<StreamBufferContainer>();
	miyaChainManager.init( toEKP2PBrokerDummySBC );


	std::shared_ptr<miya_chain::LightUTXOSet> utxoSet;
	utxoSet = miyaChainManager.utxoSet();
	std::shared_ptr<unsigned char> txID; size_t txIDLength;
	txIDLength = coinbase.calcTxID( &txID );
	utxoSet->add( coinbase.txOut() , txID , 0  );

	miyaChainManager.localStrageManager()->writeBlock( std::make_shared<block::Block>(block) );
	std::shared_ptr<block::Block> readedBlock = miyaChainManager.localStrageManager()->readBlock( blockHash );

	miyaChainManager.chainState()->update( blockHash , 0 );

	std::cout << readedBlock->header()->verify() << "\n";
	std::cout << "Done" << "\n";

	std::cout << "PrevOut :: " << "\n";
	block.coinbase()->txIn()->prevOut()->print();
	std::cout << "--------------" << "\n";
	miyaChainManager.utxoSet()->get( txID , 0  );



	std::mutex mtx;
	std::condition_variable cv;
	std::unique_lock<std::mutex> lock(mtx);
	cv.wait( lock );





- local strage manger にキャッシュを設ける
