


// ブロックデータの保存方法





// トランザクション要約ファイル



// トランザクション要約ファイルについて


1. ブロックヘッダ + 要約ファイル　の受信
2. ブロックヘッダの検証と不足トランザクションの要求
3. トランザクション内部の検証
4. チェーンマネージャーへの通知


5. 他ノードへ伝搬


6. 自身のチェーンに繋げる
7. utxoへの追加






⭐️チェーンに繋いだブロックの保存場所は?
 - 軽量ノードはここでヘッダだけストアしている





------------------------------------------
- フルノード

-  SPVノードはブロックヘッダのみ保持する
------------------------------------------



データストアに保存するもの
-> ブロックヘッダ
-> ブロックに含まれるトランザクションはどうやって保存するか


getheaders - message
getadata - message


// トランザクションの格納順序はどのように管理するか
61be55a8e2f6b4e172338bddf184d6dbee29c98853e0a0485ecee7f27b9af0b4.tx



getblocks  -> ブロックチェーンの特定のポイントから始まるブロックヘッダーハッシュを提供する
getdataに対応するレスポンスは[tx],[block].[merkleblock],[notfound]
mempool - まだブロックに取り込まれていないトランザクションを要求する(ノードがネットワークに初めて接続したときにすぐにほぼ全てのトランザクションを収集するのに役にたつ)
inv message -> 未承認のブロックでもトランザクションでも送信することができる




[ cointrol message ] 
[ data message ] 
	- [ tx ]
	- [ block ]



getheaders - - - headers


getblocks ->  inv - > gat date - tx
mempool   ->                   - block
															 - merkleblock
															 - notfound


blockファイルを作成してそのファイルに順序立ててトランザクションを格納する ? 




 -> header store 
 -> transaction troe 






